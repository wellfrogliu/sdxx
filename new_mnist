import tensorflow  as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets('MNIST_data/', one_hot=True)
sess = tf.InteractiveSession()
def conv2(x_input, w):
    return tf.nn.conv2d(x_input, w, [1,1,1,1], padding='SAME')

def pool_max(shape):
    return tf.nn.max_pool(shape, [1,2,2,1], strides=[1,2,2,1], padding='SAME')

def weight_value(shape):
    value = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(value)

def bias_value(shape):
    value = tf.constant(0.1, shape=shape)
    return tf.Variable(value)

x = tf.placeholder(tf.float32, [None, 28*28*1])
y = tf.placeholder(tf.float32, [None, 10])

x1 = tf.reshape(x, [-1,28,28,1])
w1 = weight_value([5,5,1,32])
b1 = bias_value([32])
c1 = conv2(x1, w1)
r1 = tf.nn.relu(c1 + b1)
p1 = pool_max(r1)

w2 = weight_value([5,5,32, 64])
b2 = bias_value([64])
c2 = conv2(p1, w2)
r2 = tf.nn.relu(c2 + b2)
p2 = pool_max(r2)

x3 = tf.reshape(p2, [-1, 7*7*64])
w3 = weight_value([7*7*64, 1024])
b3 = bias_value([1024])
o3 = tf.matmul(x3,w3) + b3
r3 = tf.nn.relu(o3)

keep_prob = tf.placeholder(tf.float32)
drop = tf.nn.dropout(r3, keep_prob)

w4 = weight_value([1024, 10])
b4 = bias_value([10])
o4 = tf.matmul(drop, w4) + b4
r4 = tf.nn.relu(o4)

cross_loss = tf.nn.softmax_cross_entropy_with_logits(logits=r4, labels=y)
step = tf.train.AdamOptimizer(1e-3).minimize(cross_loss)

correction_pre = tf.equal(tf.arg_max(r4, 1), tf.arg_max(y, 1))
correct = tf.reduce_mean(tf.cast(correction_pre, tf.float32))

tf.global_variables_initializer().run()
for i in range(2000):
    batch = mnist.train.next_batch(50)
    if i % 100 == 0:
        train_correct = correct.eval(feed_dict={x:batch[0],y:batch[1], keep_prob:1.0})
        print('step:%d, train_correct%g'%(i,train_correct ))
    
    step.run(feed_dict={x:batch[0], y:batch[1], keep_prob: 0.5})

print('train_correct%g'%(correct.eval(feed_dict={x:batch[0],y:batch[1], keep_prob:1.0}) ))
